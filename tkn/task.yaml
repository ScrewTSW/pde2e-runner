---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pde2e-runner
  labels:
    app.kubernetes.io/version: "0.1"
    redhat.com/product: podman-desktop
    dev.lifecycle.io/phase: testing
  annotations:
    tekton.dev/pipelines.minVersion: "0.24.x"
    tekton.dev/categories: podman-desktop
    tekton.dev/tags: podman-desktop, testing
    tekton.dev/displayName: "Podman Desktop E2E Test runner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task can setup podman machine if podman is available and run e2e test via npm task

  workspaces:
  - name: pipelines-data
  
  params:
  # Target host parameters
  - name: host
    description: host to connect to the provisioned machine
  - name: username
    description: username to connect to the provisioned machine
  - name: userpassword
    description: user password required to run installers with privileges
  - name: key
    description: key file name to connect to the provisioned machine within the workspace resources path   
  - name: os
    description: type of platform per target host (windows, darwin)
    default: windows
  - name: arch
    description: type of arch per target host for windows only amd64, for darwin amd64 or arm64 
    default: amd64
  - name: workspace-resources-path
    description: path on workspace to find resources to connect to the target machine
  # PDE2E Runner parameters
  - name: image-version
    description: pde2e-runner image version
    default: '0.0.1'
  - name: pd-url
    description: in case we want to download a specific podman desktop version. We can set up the url
    default: "''"
  - name: pd-path
    description: in case we want to test an existing version on the target host we can set up the path here
    default: "''"
  - name: fork
    description: Podman Desktop repo fork
    default: 'containers'
  - name: branch
    description: Podman Desktop repository branch or tag to checkout
    default: 'main'
  - name: npm-target
    description: npm script task for tests execution
    default: 'test:e2e'
  - name: podman-path
    description: Path to a podman binary
    default: ''
  - name: podman-initialize
    description: Podman initialization
    default: '1'
  - name: podman-start
    description: Podman machine start param
    default: '1'
  - name: podman-rootfull
    description: Initialize rootful podman machine
    default: '0'
  - name: podman-user-networking
    description: Set userModeNetworking flag
    default: '0'
  # Results parameters
  - name: worspace-qe-subpath
    description: subpath relative to workspace path where results are stored
    default: qe-results
  - name: results-folder
    description: filename for the junit file holding the e2e results
    default: results
  # Control params
  - name: target-cleanup
    description: 'this param controls if folder on target host will be removed. Defaults true'
    deafult: 'true'

  results:
  - name: duration
    description: total amount of time in seconds for the qe execution

  steps:
  - name: e2e
    image: quay.io/odockal/pde2e-runner:v$(params.image-version)-$(params.os)
    # We do not have a strict control on versions (as so they can be override)
    # force here to pull everytime just in case it is overriden
    imagePullPolicy: Always
    script: |
      #!/bin/bash

      # This is kept the same as in other tasks
      # Prepare ENVs
      SECONDS=0
      TARGET_HOST=$(params.host)
      TARGET_HOST_USERNAME=$(params.username)
      TARGET_HOST_KEY_PATH=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.key)
      chmod 600 ${TARGET_HOST_KEY_PATH}
      TARGET_FOLDER=pd-e2e
      TARGET_RESULTS=$(params.results-folder)
      TARGET_CLEANUP=$(params.target-cleanup)
      OUTPUT_FOLDER=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.worspace-qe-subpath)
      mkdir -p "${OUTPUT_FOLDER}"
      
      # Create command - command to sbustitue from GHA workflow using images
      if [[ $(params.os) == "windows" ]]; then
        cmd="${TARGET_FOLDER}/runner.ps1 "
        cmd="$cmd -targetFolder ${TARGET_FOLDER} "
        cmd="$cmd -resultsFolder ${TARGET_RESULTS} "
        cmd="$cmd -fork $(params.fork) "
        cmd="$cmd -branch $(params.branch) "
        cmd="$cmd -npmTarget $(params.npm-target) "
        cmd="$cmd -podmanPath $(params.podman-path) "
        cmd="$cmd -initialize $(params.podman-initialize) "
        cmd="$cmd -start $(params.podman-start) "
        cmd="$cmd -rootful $(params.podman-rootful) "
        cmd="$cmd -userNetworking $(params.podman-user-networking)"
      fi
      if [[ $(params.os) == "darwin" ]]; then
        cmd="${TARGET_FOLDER}/runner.sh "
        cmd="$cmd --targetFolder ${TARGET_FOLDER} "
        cmd="$cmd --resultsFolder ${TARGET_RESULTS} "
        cmd="$cmd --fork $(params.fork) "
        cmd="$cmd --branch $(params.branch) "
        cmd="$cmd --npmTarget $(params.npm-target) "
        cmd="$cmd --podmanPath $(params.podman-path) "
        cmd="$cmd --initialize $(params.podman-initialize) "
        cmd="$cmd --start $(params.podman-start) "
        cmd="$cmd --rootful $(params.podman-rootful) "
        cmd="$cmd --userNetworking $(params.podman-user-networking)" 
      fi
      
      # Exec
      . entrypoint.sh "${cmd}"

      # Results
      echo -n "${SECONDS}" | tee $(results.duration.path)
      
    resources:      
      requests:
        memory: "50Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"

  sidecars:
  - name: fake-rdp
    image: quay.io/rhqp/frdp:v0.0.1
    imagePullPolicy: Always
    env:
    - name: RDP_HOST
      value: $(params.host)
    - name: RDP_USER
      value: $(params.username)
    - name: RDP_PASSWORD
      value: $(params.userpassword)
    script: |
      #!/bin/sh
      
      # Sidecar is used to create a fake RDP connection, this is only required for windows
      if [[ $(params.os) == "windows" ]]; then
        . entrypoint.sh
      fi
      
    resources:      
      requests:
        memory: "30Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"